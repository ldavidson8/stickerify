---
import type { HTMLAttributes } from 'astro/types'
import { cn } from '@/utils/twMerge'

type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'success' | 'danger'
type ButtonSize = 'sm' | 'md' | 'lg' | 'icon'

interface BaseProps {
  class?: string
  variant?: ButtonVariant
  size?: ButtonSize
}

type ButtonProps = BaseProps & HTMLAttributes<'button'>
type AnchorProps = BaseProps &
  HTMLAttributes<'a'> & {
    href: string
  }
type Props = ButtonProps | AnchorProps

const {
  variant = 'primary',
  size = 'md',
  class: className,
  ...props
} = Astro.props

const isLink = 'href' in props

const baseStyles =
  'inline-flex whitespace-nowrap cursor-pointer items-center justify-center rounded-md font-medium transition-colors'

const variants = {
  primary: 'bg-blue-8 text-slate-12 hover:bg-blue-6',
  secondary: 'bg-slate-2 text-slate-12 hover:bg-slate-3',
  outline:
    'border border-slate-6 bg-transparent text-slate-12 hover:bg-slate-4',
  success: 'bg-green-3 text-green-12 hover:bg-green-4',
  danger: 'bg-red-3 text-red-12 hover:bg-red-4',
}

const sizes = {
  sm: 'h-8 px-3 text-xs',
  md: 'h-9 px-4 py-2 text-sm',
  lg: 'h-10 px-5 py-3',
  icon: 'size-9 [&>svg]:size-5',
}
---

{
  isLink ? (
    <a
      class={cn(baseStyles, variants[variant], sizes[size], className)}
      {...props}
    >
      <slot />
    </a>
  ) : (
    <button
      class={cn(baseStyles, variants[variant], sizes[size], className)}
      {...props}
    >
      <slot name="icon" />
      <slot />
    </button>
  )
}
